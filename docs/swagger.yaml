openapi: 3.0.0
info:
  title: Mini Social Notes API
  version: 1.1.1
  description: >
    API documentation for **Mini Social Notes**, featuring:
    - JWT Authentication
    - GitHub OAuth login (Browser redirect)
    - Notes with Category + Tags (resolved by name)
servers:
  - url: https://cse341-code-student-f3hw.onrender.com
  - url: http://localhost:3000

security:
  - bearerAuth: []

paths:
  /api/auth/register:
    post:
      tags: [Auth]
      summary: Register a new user (email/password)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [username, email, password]
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        '201':
          description: User registered

  /api/auth/login:
    post:
      tags: [Auth]
      summary: Login and get JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: Login successful

  /api/oauth/github:
    get:
      tags: [Auth]
      summary: Sign up or log in with GitHub
      description: |
        <h3>ðŸ”— Sign in with GitHub</h3>
        <p>Click the button below to sign up or log in using your GitHub account.</p>

        <div style="margin: 25px 0; text-align: center;">
          <a href="https://cse341-code-student-f3hw.onrender.com/api/oauth/github" 
             style="
               display: inline-flex;
               align-items: center;
               justify-content: center;
               background-color: #24292e;
               color: white;
               font-weight: 600;
               text-decoration: none;
               padding: 14px 24px;
               border-radius: 10px;
               font-size: 18px;
               font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Helvetica, Arial, sans-serif;
               transition: background 0.3s ease;
             "
             onmouseover="this.style.backgroundColor='#444c56'"
             onmouseout="this.style.backgroundColor='#24292e'">
            <svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" 
                 viewBox="0 0 16 16" fill="white" style="margin-right: 14px;">
              <path d="M8 0C3.58 0 0 3.58 0 8c0 3.54 
                       2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 
                       0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49
                       -2.69-.94-.09-.23-.48-.94-.82-1.13-.28
                       -.15-.68-.52-.01-.53.63-.01 1.08.58
                       1.23.82.72 1.21 1.87.87 2.33.66.07
                       -.52.28-.87.51-1.07-1.78-.2-3.64-.89
                       -3.64-3.95 0-.87.31-1.59.82-2.15
                       -.08-.2-.36-1.01.08-2.1 0 0 .67-.21
                       2.2.82a7.6 7.6 0 0 1 2-.27c.68 0
                       1.36.09 2 .27 1.53-1.04 2.2-.82
                       2.2-.82.44 1.09.16 1.9.08 2.1.51
                       .56.82 1.27.82 2.15 0 3.07-1.87
                       3.75-3.65 3.95.29.25.54.73.54
                       1.48 0 1.07-.01 1.93-.01 2.2 0
                       .21.15.46.55.38A8.01 8.01 0 0 0
                       16 8c0-4.42-3.58-8-8-8z"/>
            </svg>
            Sign in with GitHub
          </a>
        </div>

        <p>After login, GitHub will redirect you back to the callback route and display your <strong>JWT token</strong>.</p>
      responses:
        '302':
          description: Redirects user to GitHub OAuth login
      x-hideTryItOut: true

  /api/users/{id}:
    get:
      tags: [Users]
      summary: Get user by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User object
    put:
      tags: [Users]
      summary: Update user (self only)
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                bio:
                  type: string
      responses:
        '200':
          description: User updated
    delete:
      tags: [Users]
      summary: Delete user (self only)
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User deleted

  /api/notes:
    post:
      tags: [Notes]
      summary: Create a new note
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [title, content]
              properties:
                title:
                  type: string
                  example: Finish report
                content:
                  type: string
                  example: Due tomorrow morning
                category:
                  type: string
                  description: Category name (resolved to ID automatically)
                  example: Work
                tags:
                  type: array
                  description: List of tag names (resolved to IDs automatically)
                  items:
                    type: string
                  example: ['Urgent', 'Office']
      responses:
        '201':
          description: Note created
    get:
      tags: [Notes]
      summary: Get all notes (user-owned)
      responses:
        '200':
          description: List of notes with populated category and tag names

  /api/notes/{id}:
    get:
      tags: [Notes]
      summary: Get a note by ID (owner only)
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Single note with category and tag names
    put:
      tags: [Notes]
      summary: Update note (owner only)
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                content:
                  type: string
                category:
                  type: string
                  example: Personal
                tags:
                  type: array
                  items:
                    type: string
                  example: ['Chores', 'Weekend']
      responses:
        '200':
          description: Updated note
    delete:
      tags: [Notes]
      summary: Delete note (owner only)
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Deleted

  /api/categories:
    post:
      tags: [Categories]
      summary: Create a new category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name:
                  type: string
                description:
                  type: string
      responses:
        '201':
          description: Category created
    get:
      tags: [Categories]
      summary: Get all categories
      responses:
        '200':
          description: List of categories

  /api/tags:
    post:
      tags: [Tags]
      summary: Create a new tag
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name:
                  type: string
      responses:
        '201':
          description: Tag created
    get:
      tags: [Tags]
      summary: Get all tags
      responses:
        '200':
          description: List of tags

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
